<?php

namespace codemonauts\shortener\elements;

use codemonauts\shortener\elements\db\ShortUrlQuery;
use codemonauts\shortener\records\ShortUrl as ShortUrlRecord;
use codemonauts\shortener\Shortener;
use Craft;
use craft\base\Element;
use craft\elements\db\ElementQueryInterface;
use yii\base\Exception;
use yii\base\InvalidConfigException;

/**
 * Class ShortUrl
 */
class ShortUrl extends Element
{
    const SCENARIO_CREATE = 'create';

    public $code;
    public $destination;
    public $redirectCode;
    public $description;
    public $templateId;
    public $elementId;

    /**
     * @inheritDoc
     */
    public function __toString(): string
    {
        return $this->code;
    }

    /**
     * @inheritdoc
     */
    public static function displayName(): string
    {
        return 'Short URL';
    }

    /**
     * @inheritdoc
     */
    public static function lowerDisplayName(): string
    {
        return 'short url';
    }

    /**
     * @inheritdoc
     */
    public static function pluralDisplayName(): string
    {
        return 'Short URLs';
    }

    /**
     * @inheritdoc
     */
    public static function pluralLowerDisplayName(): string
    {
        return 'short urls';
    }

    /**
     * @inheritdoc
     */
    public function getIsEditable(): bool
    {
        return !$this->templateId;
    }

    /**
     * @inheritDoc
     */
    public function getCpEditUrl()
    {
        return 'shortener/short-url/' . $this->id;
    }

    /**
     * @inheritDoc
     */
    public function getUrl()
    {
        $settings = Shortener::getInstance()->getSettings();
        if ($settings->domain === null || !$this->id) {
            return null;
        }

        return trim($settings->domain, '/') . '/' . $this->code;
    }

    /**
     * @inheritDoc
     * @return ShortUrlQuery
     */
    public static function find(): ElementQueryInterface
    {
        return new ShortUrlQuery(static::class);
    }

    /**
     * @inheritDoc
     */
    public static function defineSources(string $context = null): array
    {
        return [
            [
                'key' => '*',
                'label' => 'All Short URLs',
                'criteria' => [],
            ],
        ];
    }

    /**
     * @inheritDoc
     */
    public static function defineTableAttributes(): array
    {
        return [
            'code' => 'Code',
            'destination' => 'Destination URL',
            'redirectCode' => 'Redirect HTTP status',
            'description' => 'Description',
            'templateId' => 'Template',
            'elementId' => 'Referenced Elements',
        ];
    }

    /**
     * @inheritDoc
     */
    public static function defineDefaultTableAttributes(string $source): array
    {
        return [
            'code',
            'destination',
            'redirectCode',
            'templateId',
            'elementId',
        ];
    }

    /**
     * @inheritDoc
     */
    public static function defineSortOptions(): array
    {
        return [
            'code' => 'Code',
            'destination' => 'Destination',
        ];
    }

    /**
     * @inheritDoc
     */
    public static function defineSearchableAttributes(): array
    {
        return [
            'code',
            'destination',
            'redirectCode',
            'description',
            'templateId',
            'elementId',
        ];
    }

    /**
     * @inheritDoc
     */
    public function getSearchKeywords(string $attribute): string
    {
        switch ($attribute) {
            case 'templateId':
                if ($this->getTemplate()) {
                    return $this->getElement()->title;
                }
                return '';

            case 'elementId':
                if ($this->getElement()) {
                    return $this->getElement()->title;
                }
                return '';
        }

        return parent::getSearchKeywords($attribute); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function tableAttributeHtml(string $attribute): string
    {
        switch ($attribute) {
            case 'destination':
                return sprintf('<a href="%s" target="_blank">%s</a>', $this->$attribute, $this->$attribute);

            case 'templateId':
                $template = $this->getTemplate();

                return $template !== null ? sprintf('<a href="%s">%s</a>', $template->getCpEditUrl(), $template->title) : '';

            case 'elementId':
                $element = $this->getElement();

                return $element !== null ? sprintf('<a href="%s">%s</a>', $element->getCpEditUrl(), $element->title) : '';
        }

        return parent::tableAttributeHtml($attribute);
    }

    /**
     * @inheritDoc
     */
    public function afterSave(bool $isNew): void
    {
        if (!$isNew) {
            $record = ShortUrlRecord::findOne($this->id);

            if (!$record) {
                throw new Exception('Invalid short URL ID: ' . $this->id);
            }
        } else {
            $record = new ShortUrlRecord();
            $record->id = (int)$this->id;
        }

        $record->code = $this->code;
        $record->destination = $this->destination;
        $record->redirectCode = $this->redirectCode;
        $record->description = $this->description;
        $record->templateId = $this->templateId;
        $record->elementId = $this->elementId;

        $record->save(false);

        parent::afterSave($isNew);
    }

    /**
     * @inheritDoc
     */
    public function defineRules(): array
    {
        $rules = parent::defineRules();

        $rules[] = [['code', 'destination'], 'required'];
        $rules[] = ['destination', 'trim'];
        if (Craft::$app->env === 'production') {
            $rules[] = ['destination', 'url'];
        }
        $rules[] = ['code', 'unique', 'targetClass' => ShortUrlRecord::class, 'on' => self::SCENARIO_CREATE];

        return $rules;
    }

    /**
     * Returns the template.
     *
     * @return Template|null
     * @throws InvalidConfigException
     */
    public function getTemplate()
    {
        if ($this->templateId === null) {
            return null;
        }

        if (($template = Shortener::getInstance()->template->getTemplateById($this->templateId)) === null) {
            throw new InvalidConfigException('Invalid template ID: ' . $this->templateId);
        }

        return $template;
    }

    /**
     * Returns the entry.
     *
     * @return Element|null
     * @throws InvalidConfigException
     */
    public function getElement()
    {
        if ($this->elementId === null) {
            return null;
        }

        if (($element = Craft::$app->getElements()->getElementById($this->elementId)) === null) {
            throw new InvalidConfigException('Invalid element ID: ' . $this->elementId);
        }

        return $element;
    }
}
